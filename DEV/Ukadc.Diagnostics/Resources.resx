<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BothPropertyTokenAndDataPropertyDefined" xml:space="preserve">
    <value>It is invalid to specify both a propertyToken ('{0}') and a dataProperty element on a '{1}'.</value>
    <comment>Used in PropertyFilter</comment>
  </data>
  <data name="CleanIntervalCannotBeZero" xml:space="preserve">
    <value>The cleanInterval attribute must be a valid TimeSpan greater than Zero. The value '{0}' is invalid. Using default cleanInterval '{1}'.</value>
    <comment>Used in FileTraceListener</comment>
  </data>
  <data name="CleanIntervalInvalid" xml:space="preserve">
    <value>The cleanInterval attribute must be a valid TimeSpan. The value '{0}' is invalid. Using default cleanInterval '{1}'.</value>
    <comment>Used in FileTraceListener</comment>
  </data>
  <data name="CouldNotCreateInstanceOfType" xml:space="preserve">
    <value>Could not create instance of type '{0}'.</value>
    <comment>Used in TraceUtil</comment>
  </data>
  <data name="CouldNotFindEmptyConstructor" xml:space="preserve">
    <value>A default constructor could not be found on type '{0}'.</value>
    <comment>Used in TraceUtil</comment>
  </data>
  <data name="DoesNotImplementRightInterfaces" xml:space="preserve">
    <value>The property '{0}' is of type '{1}' which does not implement IComparable or IConvertible and therefore cannot be evaluated or compared against.</value>
    <comment>Used in DynamicPropertyReader</comment>
  </data>
  <data name="InheritanceError" xml:space="preserve">
    <value>The Type '{0}' does not inherit from '{1}'.</value>
    <comment>Used in TokenizedPropertyReaderFactory</comment>
  </data>
  <data name="MultiFilterGroupError" xml:space="preserve">
    <value>MultiFilter configuration error: No filterGroup with the name '{0}' could be found.</value>
    <comment>Used in MultiFilter</comment>
  </data>
  <data name="MultiFilterMustContainOneFilter" xml:space="preserve">
    <value>MultiFilter configuration error: filterGroup must contain at least 1 or more filters.</value>
    <comment>Used in MultiFilter</comment>
  </data>
  <data name="NoConfigurationSectionFound" xml:space="preserve">
    <value>No '{0}' configuration section was found (&lt;section name='{0}' type='{1}' /&gt;).</value>
    <comment>Used in UkadcDiagnosticsSection</comment>
  </data>
  <data name="NoConstructorFound" xml:space="preserve">
    <value>All single parameter constructors on the type '{0}' were tried but none could use the parameter '{1}' passed in.</value>
    <comment>Used in TraceUtil</comment>
  </data>
  <data name="NoPropOrFieldOrInaccessible" xml:space="preserve">
    <value>Cannot find a field or property called {0} on type {1} or it cannot be read</value>
    <comment>Used in FastPropertyGetter</comment>
  </data>
  <data name="NoReadableProperty" xml:space="preserve">
    <value>FastPropertyGetter: There is no readable property '{0}' on type '{1}'.</value>
    <comment>Used in FastPropertyGetter</comment>
  </data>
  <data name="NotAssignableFrom" xml:space="preserve">
    <value>The Type '{0}' does not inherit or derive from the '{1}' type.</value>
    <comment>Used in TraceUtil</comment>
  </data>
  <data name="OperationNotSupported" xml:space="preserve">
    <value>The Operation '{0}' is not supported by the '{1}'. Try one of the following operations '{2}'.</value>
    <comment>Used in PropertyReader and StringComparator</comment>
  </data>
  <data name="PropertyFilterNotFound" xml:space="preserve">
    <value>PropertyFilter configuration error: No propertyFilter with the name '{0}' could be found.</value>
    <comment>Used in PropertyFilter</comment>
  </data>
  <data name="SmtpTraceListenerConfigError" xml:space="preserve">
    <value>SmtpTraceListener configuration error: No section with the name '{0}' could be found.</value>
    <comment>Used in SmtpTraceListener</comment>
  </data>
  <data name="SqlTraceListenerConfigError" xml:space="preserve">
    <value>SqlTraceListener configuration error: No section with the name '{0}' could be found.</value>
    <comment>Used in SqlTraceListener</comment>
  </data>
  <data name="TokenAlreadyExists" xml:space="preserve">
    <value>The token '{0}' already exists in the token dictionary and cannot be added.</value>
    <comment>Used in TokenizedPropertyReaderFactory</comment>
  </data>
  <data name="TokenElementIncorrect" xml:space="preserve">
    <value>You can only specify one of format, type and dynamicProperty on a token element (token name='{0}').</value>
    <comment>Used in TokenizedPropertyReaderFactory</comment>
  </data>
  <data name="TypeAlreadyRegistered" xml:space="preserve">
    <value>The type '{0}' has already been registered with the locator.</value>
    <comment>Used in ServiceLocator</comment>
  </data>
  <data name="TypeDoesNotImplementIComparable" xml:space="preserve">
    <value>The Type '{0}' does not implement IComparable and cannot be used by the '{1}'.</value>
    <comment>Used in NumericComparator</comment>
  </data>
  <data name="TypeNotRegistered" xml:space="preserve">
    <value>The type '{0}' has not been registered with this locator.</value>
    <comment>Used in ServiceLocator</comment>
  </data>
  <data name="UnrecognizedToken" xml:space="preserve">
    <value>The token '{0}' does not exist in the token dictionary.</value>
    <comment>Used in TokenizedPropertyReaderFactory</comment>
  </data>
</root>