<?xml version="1.0" encoding="utf-8"?>
<topic id="d20108cc-d22f-47fd-b2be-75180a97a1d8" revisionNumber="1">
	<developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
		<!--
		<summary>
		  <para>Optional summary abstract</para>
		</summary>
		-->
	    <introduction>
			<!-- Uncomment this to generate an outline of the section and sub-section
			   titles.  Specify a numeric value as the inner text to limit it to
			   a specific number of sub-topics when creating the outline.  Specify
			   zero (0) to limit it to top-level sections only.  -->
			<!-- <autoOutline /> -->
			<para>The facilities of System.Diagnostics are not well understood by everyone - indeed if you have been developing since .NET 1.0 
			you would be forgiven for never having gone back to this namespace as the support for logging in .NET 1.0 was, to be fair, limited.</para>
			<para>As a quick overview you have the following main classes.</para>
			<mediaLink>
				<image xlink:href="beefbeef-baad-beef-0000-000000000001"/>
			</mediaLink>
      		<para>These classes are briefly as follows...</para>
      		<list class="bullet">
      			<listItem>At least one 
      			<externalLink>
					<linkText>TraceSource</linkText>
					<linkUri>http://msdn2.microsoft.com/System.Diagnostics.TraceSource</linkUri>
					<linkTarget>_self</linkTarget>
				</externalLink>
      			- instantiated by you in your application</listItem>
      			<listItem>At least one 
      			<externalLink>
					<linkText>TraceListener</linkText>
					<linkUri>http://msdn2.microsoft.com/System.Diagnostics.TraceListener</linkUri>
					<linkTarget>_self</linkTarget>
				</externalLink>
      			- this is where trace data is sent to</listItem>
      			<listItem>Optional 
      			<externalLink>
					<linkText>TraceFilter(s)</linkText>
					<linkUri>http://msdn2.microsoft.com/System.Diagnostics.TraceFilter</linkUri>
					<linkTarget>_self</linkTarget>
				</externalLink>
      			- can be used to further discriminate whether an event is traced</listItem>
      		</list>
      		<para>In this worked example we'll create a trace source, and then define a single trace listener in the configuration file.
      		You'll typically use the application config file to change the level of trace output produced, and also which listeners
      		are defined, as this information really shouldn't be hard-coded. One of the nice things here is that you can alter the
      		amount of trace data being emitted (and where that trace data goes) simply by altering this .config file.</para>
	    </introduction>
	    
	    <section address="Step1:DefineTraceSource">
	    	<title>Step 1 - Define a TraceSource</title>
	    	<content>
		    	<para>
			    	In this step of the process we need to construct a TraceSource instance for our assembly. A TraceSource is defined
			    	with a name and this typically corresponds to the name of the assembly. As an example there is the System.ServiceModel trace
			    	source which is utilised in the assembly of the same name. Keeping the name the same means it's easier for someone
			    	using your assembly to change configuration options for it, as they can easily remember the name of the trace source as it's
			    	staring them in the face. So as a rule of thumb, always call your trace source the same as the assembly.
		    	</para>
	    	</content>
	    </section>

	    <section address="Step2:DefineTraceListener">
	    	<title>Step 2 - Define the TraceListener</title>
	    	<content></content>
	    </section>

	    <section address="Step3:RunTheApp">
	    	<title>Step 3 - Run the application</title>
	    	<content></content>
	    </section>

    
    <!-- Add one or more top-level section elements.  These are collapsible.
         If using <autoOutline />, add an address attribute to identify it
         and specify a title so that it can be jumped to with a hyperlink. -->
    <section address="Section1">
      <title>Optional section title</title>
      <content>
        <!-- Uncomment this to create a sub-section outline
        <autoOutline /> -->
        <para>Add one or more sections with content</para>
      </content>
      <!-- If a section contains a sections element, its content creates
           sub-sections.  These are not collapsible.
      <sections>
          <section address="SubSection1">
              <title>Sub-section 1</title>
              <content>
                  <para>Sub-section content.</para>
              </content>
          </section>
          <section address="SubSection2">
              <title>Sub-section 2</title>
              <content>
                  <para>Sub-section content.</para>
              </content>
          </section>
      </sections> -->
    </section>
    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID"/>
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>